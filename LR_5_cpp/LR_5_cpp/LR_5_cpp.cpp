/*Лабораторная работа 7.
Обработка исключений.Функции, генерирующие исключения
Написать рекурсивную функцию для вычисления корня уравнения на некотором отрезке.Функция, реализуемая в задании, обязана выполнять проверку передаваемых параметров и генерировать исключение в случае ошибочных данных со спецификацией throw().Функция принимает в качестве параметров отрезок[xн, xк], на котором предположительно находится корень, коэффициенты уравнения а, b, с и точность e.Нечётные номера вариантов  используют метод половинного деления, чётные – метод хорд.
В главной функции происходит запрос данных у пользователя и вызов функции, генерирующей исключения.Обработка всех перехватываемых исключений и выдача соответствующих сообщений также производится в главной функции.
Результаты работы представить в виде отчёта с построением математической модели и полного набора тестовых данных.Продемонстрировать работающую программу на предложенном наборе.
*/

#include "pch.h"
#include <iostream>
#include <cmath>
#include <windows.h>

using namespace std;


double a, b, c,eps,xn,xe;

double function(double x)
{
	if (x < 0 || c < 0)
	{
		throw "x element R : x>0 and log(c)!=0 and log(c) log(x)>=0";
		return x, c;
	}

	if ((log10(x) / log10(c)) < 0)
	{
		throw "logc(x)!<0";
		return(log10(x) / log10(c));
	}
	/*double n = sqrt(log10(x) / log10(c));
	return ((x*a + b) - n);*/
	double n = pow(x,2)* pow(a,2) + pow(b,2);
	return x - pow(c, n);


}

double hords()
{
	while (fabs(xe - xn) > eps)
	{
		xn = xe - (xe - xn) * function(xe) / (function(xe) - function(xn));
		xe = xn - (xn - xe) * function(xn) / (function(xn) - function(xe));
		cout << xe;
	}
	return xe;
}


int main()
{

	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	cout << "Введите коэфицент a: "; cin >> a;
	cout << "Введите коэфицент b: "; cin >> b;
	cout << "Введите коэфицент c: "; cin >> c;
	cout << "Введите точность eps: "; cin >> eps;
	cout << "Введите начало интервала: "; cin >> xn;
	cout << "Введите конец интервала: "; cin >> xe;
	cout << hords();

	system("pause");
	return 0;
}

