/*
Лабораторная работа 1.  Структура-пара

Цель: Знакомство с основными понятиями объектно-ориентированного подхода к программированию

Методические указания:
Структурой-парой называется структура с двумя полями, которые обычно имеют имена first и second. Требуется реализовать новый тип данных с помощью такой структуры. Во всех заданиях обязательно должны присутствовать:
метод, указанный в варианте задания;
метод инициализации полей Init; метод должен контролировать корректность аргументов;
ввод с клавиатуры Read; для контроля корректности вводимых данных вызывать метод Init;
вывод на экран Display.
Метод Init и метод по варианту задания реализовать внутри структуры; методы Read и Display – вне структуры.
Реализовать внешнюю функцию с именем make_тип(), где тип – тип реализуемой структуры. Функция должна получать в качестве аргументов значения для полей структуры и возвращать структуру требуемого типа. Для контроля корректности параметров вызывать метод Init. При передаче ошибочных параметров следует выводить сообщение и заканчивать работу (с помощью механизма исключений).
Для демонстрации работы с объектами нового типа во всех заданиях требуется написать главную функцию. В программе обязательно должны быть продемонстрированы различные способы создания объектов и массивов объектов (локальный, динамический, массив объектов, динамический массив объектов). Программа должна демонстрировать использование всех функций и методов. Программа должна выводить на экран размер класса в режиме #pragma pack(1) и без него.
При трансляции программы не должно выводиться никаких предупреждений (warning).
При запуске программы должны отображаться сведения о разработчике и условия задачи.



Вариант 12 12.	Поле first — вещественное число, координата х точки на плоскости; поле second — вещественное число, координата у точки на плоскости. Точка должна находиться в первом квадранте. Реализовать метод distance()— расстояние точки от начала координат.
*/


#include <iostream>
#include <windows.h>
#include <cmath>

using namespace std;

class С_coords //Создаем класс и указанные в задании методы и свойства вместе с конструктором и деструктором
{
public: С_coords(double x, double y) : first(x),second(y){}; 
		~С_coords() {};
		С_coords* Read();
		double Distance();
		void Display();
		void Init(double x, double y);

private: double first, second;
};

void С_coords::Init(double x,double y) //Описываем функцию init
{
	if (x == NULL)
	{
		cout << "Ошибка аргумнта first";
		return;
	}
	if (y == NULL)
	{
		cout << "Ошибка аргумнта second";
		return;
	}
	first = x;
	second = y;
}
void С_coords::Display() //Описываем функцию display
{
	cout << "\tfirst: " << first << "\tsecond: " << second << endl;
}
double С_coords::Distance() //Описываем функцию distance
{
	return sqrt(pow(first,2) + pow(second,2));
}

С_coords* С_coords::Read()  //Описываем функцию read в ней же мы проверяем вводимые значения
{
	double x, y;
	cout << "Введите x: "; cin >> x;
	if (!cin) {
		cout << "Ошибка ввода!" << endl; cin.clear();
		return NULL;
	}
	cout << "Введите y: "; cin >> y;
	if (!cin) {
		cout << "Ошибка ввода!" << endl; cin.clear();
		return NULL;
	}
	Init(x, y);
	return this;
}
С_coords* make_Coord()  // функция возвращающая класс треуемого типа(принимает аргументы )
{
	double x, y;
	cout << "Введите x: ";
	cin >> x;
	if (!cin) {
		cout << "Ошибка ввода!" << endl; cin.clear();
		return NULL;
	}
	cout << "Введите y: "; cin >> y;
	if (!cin) {
		cout << "Ошибка ввода!" << endl; cin.clear();
		return NULL;
	}
	С_coords* coords = new С_coords(x, y);
	return coords;

}


int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	С_coords* coordinates;  //Создаем экземпляр класса

	if (coordinates = make_Coord())   
	{ 
		coordinates->Display();
	}
	if (coordinates->Read())     // если аргументы введены то считываем их
	{ 
		coordinates->Display();
	}
	if (coordinates) {
		cout << "\nDistance: " << coordinates->Distance() << endl; // ВЫводим дистанцию
	} 

	system("pause");
	return 0;
}